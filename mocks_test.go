// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks_test.go -package=cmdchain -typed
//

// Package cmdchain is a generated GoMock package.
package cmdchain

import (
	context "context"
	io "io"
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChainBuilder is a mock of ChainBuilder interface.
type MockChainBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockChainBuilderMockRecorder
	isgomock struct{}
}

// MockChainBuilderMockRecorder is the mock recorder for MockChainBuilder.
type MockChainBuilderMockRecorder struct {
	mock *MockChainBuilder
}

// NewMockChainBuilder creates a new mock instance.
func NewMockChainBuilder(ctrl *gomock.Controller) *MockChainBuilder {
	mock := &MockChainBuilder{ctrl: ctrl}
	mock.recorder = &MockChainBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainBuilder) EXPECT() *MockChainBuilderMockRecorder {
	return m.recorder
}

// Finalize mocks base method.
func (m *MockChainBuilder) Finalize() FinalizedBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize")
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockChainBuilderMockRecorder) Finalize() *MockChainBuilderFinalizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockChainBuilder)(nil).Finalize))
	return &MockChainBuilderFinalizeCall{Call: call}
}

// MockChainBuilderFinalizeCall wrap *gomock.Call
type MockChainBuilderFinalizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderFinalizeCall) Return(arg0 FinalizedBuilder) *MockChainBuilderFinalizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderFinalizeCall) Do(f func() FinalizedBuilder) *MockChainBuilderFinalizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderFinalizeCall) DoAndReturn(f func() FinalizedBuilder) *MockChainBuilderFinalizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Join mocks base method.
func (m *MockChainBuilder) Join(name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockChainBuilderMockRecorder) Join(name any, args ...any) *MockChainBuilderJoinCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockChainBuilder)(nil).Join), varargs...)
	return &MockChainBuilderJoinCall{Call: call}
}

// MockChainBuilderJoinCall wrap *gomock.Call
type MockChainBuilderJoinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderJoinCall) Return(arg0 CommandBuilder) *MockChainBuilderJoinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderJoinCall) Do(f func(string, ...string) CommandBuilder) *MockChainBuilderJoinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderJoinCall) DoAndReturn(f func(string, ...string) CommandBuilder) *MockChainBuilderJoinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinCmd mocks base method.
func (m *MockChainBuilder) JoinCmd(cmd *exec.Cmd) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCmd", cmd)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinCmd indicates an expected call of JoinCmd.
func (mr *MockChainBuilderMockRecorder) JoinCmd(cmd any) *MockChainBuilderJoinCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCmd", reflect.TypeOf((*MockChainBuilder)(nil).JoinCmd), cmd)
	return &MockChainBuilderJoinCmdCall{Call: call}
}

// MockChainBuilderJoinCmdCall wrap *gomock.Call
type MockChainBuilderJoinCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderJoinCmdCall) Return(arg0 CommandBuilder) *MockChainBuilderJoinCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderJoinCmdCall) Do(f func(*exec.Cmd) CommandBuilder) *MockChainBuilderJoinCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderJoinCmdCall) DoAndReturn(f func(*exec.Cmd) CommandBuilder) *MockChainBuilderJoinCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmd mocks base method.
func (m *MockChainBuilder) JoinShellCmd(command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmd", command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmd indicates an expected call of JoinShellCmd.
func (mr *MockChainBuilderMockRecorder) JoinShellCmd(command any) *MockChainBuilderJoinShellCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmd", reflect.TypeOf((*MockChainBuilder)(nil).JoinShellCmd), command)
	return &MockChainBuilderJoinShellCmdCall{Call: call}
}

// MockChainBuilderJoinShellCmdCall wrap *gomock.Call
type MockChainBuilderJoinShellCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderJoinShellCmdCall) Return(arg0 CommandBuilder) *MockChainBuilderJoinShellCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderJoinShellCmdCall) Do(f func(string) CommandBuilder) *MockChainBuilderJoinShellCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderJoinShellCmdCall) DoAndReturn(f func(string) CommandBuilder) *MockChainBuilderJoinShellCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmdWithContext mocks base method.
func (m *MockChainBuilder) JoinShellCmdWithContext(ctx context.Context, command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmdWithContext", ctx, command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmdWithContext indicates an expected call of JoinShellCmdWithContext.
func (mr *MockChainBuilderMockRecorder) JoinShellCmdWithContext(ctx, command any) *MockChainBuilderJoinShellCmdWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmdWithContext", reflect.TypeOf((*MockChainBuilder)(nil).JoinShellCmdWithContext), ctx, command)
	return &MockChainBuilderJoinShellCmdWithContextCall{Call: call}
}

// MockChainBuilderJoinShellCmdWithContextCall wrap *gomock.Call
type MockChainBuilderJoinShellCmdWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderJoinShellCmdWithContextCall) Return(arg0 CommandBuilder) *MockChainBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderJoinShellCmdWithContextCall) Do(f func(context.Context, string) CommandBuilder) *MockChainBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderJoinShellCmdWithContextCall) DoAndReturn(f func(context.Context, string) CommandBuilder) *MockChainBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinWithContext mocks base method.
func (m *MockChainBuilder) JoinWithContext(ctx context.Context, name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinWithContext", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinWithContext indicates an expected call of JoinWithContext.
func (mr *MockChainBuilderMockRecorder) JoinWithContext(ctx, name any, args ...any) *MockChainBuilderJoinWithContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinWithContext", reflect.TypeOf((*MockChainBuilder)(nil).JoinWithContext), varargs...)
	return &MockChainBuilderJoinWithContextCall{Call: call}
}

// MockChainBuilderJoinWithContextCall wrap *gomock.Call
type MockChainBuilderJoinWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainBuilderJoinWithContextCall) Return(arg0 CommandBuilder) *MockChainBuilderJoinWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainBuilderJoinWithContextCall) Do(f func(context.Context, string, ...string) CommandBuilder) *MockChainBuilderJoinWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainBuilderJoinWithContextCall) DoAndReturn(f func(context.Context, string, ...string) CommandBuilder) *MockChainBuilderJoinWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFirstCommandBuilder is a mock of FirstCommandBuilder interface.
type MockFirstCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFirstCommandBuilderMockRecorder
	isgomock struct{}
}

// MockFirstCommandBuilderMockRecorder is the mock recorder for MockFirstCommandBuilder.
type MockFirstCommandBuilderMockRecorder struct {
	mock *MockFirstCommandBuilder
}

// NewMockFirstCommandBuilder creates a new mock instance.
func NewMockFirstCommandBuilder(ctrl *gomock.Controller) *MockFirstCommandBuilder {
	mock := &MockFirstCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockFirstCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirstCommandBuilder) EXPECT() *MockFirstCommandBuilderMockRecorder {
	return m.recorder
}

// Finalize mocks base method.
func (m *MockFirstCommandBuilder) Finalize() FinalizedBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize")
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockFirstCommandBuilderMockRecorder) Finalize() *MockFirstCommandBuilderFinalizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockFirstCommandBuilder)(nil).Finalize))
	return &MockFirstCommandBuilderFinalizeCall{Call: call}
}

// MockFirstCommandBuilderFinalizeCall wrap *gomock.Call
type MockFirstCommandBuilderFinalizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderFinalizeCall) Return(arg0 FinalizedBuilder) *MockFirstCommandBuilderFinalizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderFinalizeCall) Do(f func() FinalizedBuilder) *MockFirstCommandBuilderFinalizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderFinalizeCall) DoAndReturn(f func() FinalizedBuilder) *MockFirstCommandBuilderFinalizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Join mocks base method.
func (m *MockFirstCommandBuilder) Join(name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFirstCommandBuilderMockRecorder) Join(name any, args ...any) *MockFirstCommandBuilderJoinCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFirstCommandBuilder)(nil).Join), varargs...)
	return &MockFirstCommandBuilderJoinCall{Call: call}
}

// MockFirstCommandBuilderJoinCall wrap *gomock.Call
type MockFirstCommandBuilderJoinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderJoinCall) Return(arg0 CommandBuilder) *MockFirstCommandBuilderJoinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderJoinCall) Do(f func(string, ...string) CommandBuilder) *MockFirstCommandBuilderJoinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderJoinCall) DoAndReturn(f func(string, ...string) CommandBuilder) *MockFirstCommandBuilderJoinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinCmd mocks base method.
func (m *MockFirstCommandBuilder) JoinCmd(cmd *exec.Cmd) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCmd", cmd)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinCmd indicates an expected call of JoinCmd.
func (mr *MockFirstCommandBuilderMockRecorder) JoinCmd(cmd any) *MockFirstCommandBuilderJoinCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCmd", reflect.TypeOf((*MockFirstCommandBuilder)(nil).JoinCmd), cmd)
	return &MockFirstCommandBuilderJoinCmdCall{Call: call}
}

// MockFirstCommandBuilderJoinCmdCall wrap *gomock.Call
type MockFirstCommandBuilderJoinCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderJoinCmdCall) Return(arg0 CommandBuilder) *MockFirstCommandBuilderJoinCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderJoinCmdCall) Do(f func(*exec.Cmd) CommandBuilder) *MockFirstCommandBuilderJoinCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderJoinCmdCall) DoAndReturn(f func(*exec.Cmd) CommandBuilder) *MockFirstCommandBuilderJoinCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmd mocks base method.
func (m *MockFirstCommandBuilder) JoinShellCmd(command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmd", command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmd indicates an expected call of JoinShellCmd.
func (mr *MockFirstCommandBuilderMockRecorder) JoinShellCmd(command any) *MockFirstCommandBuilderJoinShellCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmd", reflect.TypeOf((*MockFirstCommandBuilder)(nil).JoinShellCmd), command)
	return &MockFirstCommandBuilderJoinShellCmdCall{Call: call}
}

// MockFirstCommandBuilderJoinShellCmdCall wrap *gomock.Call
type MockFirstCommandBuilderJoinShellCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderJoinShellCmdCall) Return(arg0 CommandBuilder) *MockFirstCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderJoinShellCmdCall) Do(f func(string) CommandBuilder) *MockFirstCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderJoinShellCmdCall) DoAndReturn(f func(string) CommandBuilder) *MockFirstCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmdWithContext mocks base method.
func (m *MockFirstCommandBuilder) JoinShellCmdWithContext(ctx context.Context, command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmdWithContext", ctx, command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmdWithContext indicates an expected call of JoinShellCmdWithContext.
func (mr *MockFirstCommandBuilderMockRecorder) JoinShellCmdWithContext(ctx, command any) *MockFirstCommandBuilderJoinShellCmdWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmdWithContext", reflect.TypeOf((*MockFirstCommandBuilder)(nil).JoinShellCmdWithContext), ctx, command)
	return &MockFirstCommandBuilderJoinShellCmdWithContextCall{Call: call}
}

// MockFirstCommandBuilderJoinShellCmdWithContextCall wrap *gomock.Call
type MockFirstCommandBuilderJoinShellCmdWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderJoinShellCmdWithContextCall) Return(arg0 CommandBuilder) *MockFirstCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderJoinShellCmdWithContextCall) Do(f func(context.Context, string) CommandBuilder) *MockFirstCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderJoinShellCmdWithContextCall) DoAndReturn(f func(context.Context, string) CommandBuilder) *MockFirstCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinWithContext mocks base method.
func (m *MockFirstCommandBuilder) JoinWithContext(ctx context.Context, name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinWithContext", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinWithContext indicates an expected call of JoinWithContext.
func (mr *MockFirstCommandBuilderMockRecorder) JoinWithContext(ctx, name any, args ...any) *MockFirstCommandBuilderJoinWithContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinWithContext", reflect.TypeOf((*MockFirstCommandBuilder)(nil).JoinWithContext), varargs...)
	return &MockFirstCommandBuilderJoinWithContextCall{Call: call}
}

// MockFirstCommandBuilderJoinWithContextCall wrap *gomock.Call
type MockFirstCommandBuilderJoinWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderJoinWithContextCall) Return(arg0 CommandBuilder) *MockFirstCommandBuilderJoinWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderJoinWithContextCall) Do(f func(context.Context, string, ...string) CommandBuilder) *MockFirstCommandBuilderJoinWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderJoinWithContextCall) DoAndReturn(f func(context.Context, string, ...string) CommandBuilder) *MockFirstCommandBuilderJoinWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithInput mocks base method.
func (m *MockFirstCommandBuilder) WithInput(sources ...io.Reader) ChainBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithInput", varargs...)
	ret0, _ := ret[0].(ChainBuilder)
	return ret0
}

// WithInput indicates an expected call of WithInput.
func (mr *MockFirstCommandBuilderMockRecorder) WithInput(sources ...any) *MockFirstCommandBuilderWithInputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInput", reflect.TypeOf((*MockFirstCommandBuilder)(nil).WithInput), sources...)
	return &MockFirstCommandBuilderWithInputCall{Call: call}
}

// MockFirstCommandBuilderWithInputCall wrap *gomock.Call
type MockFirstCommandBuilderWithInputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirstCommandBuilderWithInputCall) Return(arg0 ChainBuilder) *MockFirstCommandBuilderWithInputCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirstCommandBuilderWithInputCall) Do(f func(...io.Reader) ChainBuilder) *MockFirstCommandBuilderWithInputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirstCommandBuilderWithInputCall) DoAndReturn(f func(...io.Reader) ChainBuilder) *MockFirstCommandBuilderWithInputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCommandBuilder is a mock of CommandBuilder interface.
type MockCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBuilderMockRecorder
	isgomock struct{}
}

// MockCommandBuilderMockRecorder is the mock recorder for MockCommandBuilder.
type MockCommandBuilderMockRecorder struct {
	mock *MockCommandBuilder
}

// NewMockCommandBuilder creates a new mock instance.
func NewMockCommandBuilder(ctrl *gomock.Controller) *MockCommandBuilder {
	mock := &MockCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuilder) EXPECT() *MockCommandBuilderMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCommandBuilder) Apply(arg0 CommandApplier) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockCommandBuilderMockRecorder) Apply(arg0 any) *MockCommandBuilderApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCommandBuilder)(nil).Apply), arg0)
	return &MockCommandBuilderApplyCall{Call: call}
}

// MockCommandBuilderApplyCall wrap *gomock.Call
type MockCommandBuilderApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderApplyCall) Return(arg0 CommandBuilder) *MockCommandBuilderApplyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderApplyCall) Do(f func(CommandApplier) CommandBuilder) *MockCommandBuilderApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderApplyCall) DoAndReturn(f func(CommandApplier) CommandBuilder) *MockCommandBuilderApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyBeforeStart mocks base method.
func (m *MockCommandBuilder) ApplyBeforeStart(arg0 CommandApplier) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBeforeStart", arg0)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// ApplyBeforeStart indicates an expected call of ApplyBeforeStart.
func (mr *MockCommandBuilderMockRecorder) ApplyBeforeStart(arg0 any) *MockCommandBuilderApplyBeforeStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBeforeStart", reflect.TypeOf((*MockCommandBuilder)(nil).ApplyBeforeStart), arg0)
	return &MockCommandBuilderApplyBeforeStartCall{Call: call}
}

// MockCommandBuilderApplyBeforeStartCall wrap *gomock.Call
type MockCommandBuilderApplyBeforeStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderApplyBeforeStartCall) Return(arg0 CommandBuilder) *MockCommandBuilderApplyBeforeStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderApplyBeforeStartCall) Do(f func(CommandApplier) CommandBuilder) *MockCommandBuilderApplyBeforeStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderApplyBeforeStartCall) DoAndReturn(f func(CommandApplier) CommandBuilder) *MockCommandBuilderApplyBeforeStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DiscardStdOut mocks base method.
func (m *MockCommandBuilder) DiscardStdOut() CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardStdOut")
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// DiscardStdOut indicates an expected call of DiscardStdOut.
func (mr *MockCommandBuilderMockRecorder) DiscardStdOut() *MockCommandBuilderDiscardStdOutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardStdOut", reflect.TypeOf((*MockCommandBuilder)(nil).DiscardStdOut))
	return &MockCommandBuilderDiscardStdOutCall{Call: call}
}

// MockCommandBuilderDiscardStdOutCall wrap *gomock.Call
type MockCommandBuilderDiscardStdOutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderDiscardStdOutCall) Return(arg0 CommandBuilder) *MockCommandBuilderDiscardStdOutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderDiscardStdOutCall) Do(f func() CommandBuilder) *MockCommandBuilderDiscardStdOutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderDiscardStdOutCall) DoAndReturn(f func() CommandBuilder) *MockCommandBuilderDiscardStdOutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Finalize mocks base method.
func (m *MockCommandBuilder) Finalize() FinalizedBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize")
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockCommandBuilderMockRecorder) Finalize() *MockCommandBuilderFinalizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockCommandBuilder)(nil).Finalize))
	return &MockCommandBuilderFinalizeCall{Call: call}
}

// MockCommandBuilderFinalizeCall wrap *gomock.Call
type MockCommandBuilderFinalizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderFinalizeCall) Return(arg0 FinalizedBuilder) *MockCommandBuilderFinalizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderFinalizeCall) Do(f func() FinalizedBuilder) *MockCommandBuilderFinalizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderFinalizeCall) DoAndReturn(f func() FinalizedBuilder) *MockCommandBuilderFinalizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForwardError mocks base method.
func (m *MockCommandBuilder) ForwardError() CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardError")
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// ForwardError indicates an expected call of ForwardError.
func (mr *MockCommandBuilderMockRecorder) ForwardError() *MockCommandBuilderForwardErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardError", reflect.TypeOf((*MockCommandBuilder)(nil).ForwardError))
	return &MockCommandBuilderForwardErrorCall{Call: call}
}

// MockCommandBuilderForwardErrorCall wrap *gomock.Call
type MockCommandBuilderForwardErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderForwardErrorCall) Return(arg0 CommandBuilder) *MockCommandBuilderForwardErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderForwardErrorCall) Do(f func() CommandBuilder) *MockCommandBuilderForwardErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderForwardErrorCall) DoAndReturn(f func() CommandBuilder) *MockCommandBuilderForwardErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Join mocks base method.
func (m *MockCommandBuilder) Join(name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockCommandBuilderMockRecorder) Join(name any, args ...any) *MockCommandBuilderJoinCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockCommandBuilder)(nil).Join), varargs...)
	return &MockCommandBuilderJoinCall{Call: call}
}

// MockCommandBuilderJoinCall wrap *gomock.Call
type MockCommandBuilderJoinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderJoinCall) Return(arg0 CommandBuilder) *MockCommandBuilderJoinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderJoinCall) Do(f func(string, ...string) CommandBuilder) *MockCommandBuilderJoinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderJoinCall) DoAndReturn(f func(string, ...string) CommandBuilder) *MockCommandBuilderJoinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinCmd mocks base method.
func (m *MockCommandBuilder) JoinCmd(cmd *exec.Cmd) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinCmd", cmd)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinCmd indicates an expected call of JoinCmd.
func (mr *MockCommandBuilderMockRecorder) JoinCmd(cmd any) *MockCommandBuilderJoinCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinCmd", reflect.TypeOf((*MockCommandBuilder)(nil).JoinCmd), cmd)
	return &MockCommandBuilderJoinCmdCall{Call: call}
}

// MockCommandBuilderJoinCmdCall wrap *gomock.Call
type MockCommandBuilderJoinCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderJoinCmdCall) Return(arg0 CommandBuilder) *MockCommandBuilderJoinCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderJoinCmdCall) Do(f func(*exec.Cmd) CommandBuilder) *MockCommandBuilderJoinCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderJoinCmdCall) DoAndReturn(f func(*exec.Cmd) CommandBuilder) *MockCommandBuilderJoinCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmd mocks base method.
func (m *MockCommandBuilder) JoinShellCmd(command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmd", command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmd indicates an expected call of JoinShellCmd.
func (mr *MockCommandBuilderMockRecorder) JoinShellCmd(command any) *MockCommandBuilderJoinShellCmdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmd", reflect.TypeOf((*MockCommandBuilder)(nil).JoinShellCmd), command)
	return &MockCommandBuilderJoinShellCmdCall{Call: call}
}

// MockCommandBuilderJoinShellCmdCall wrap *gomock.Call
type MockCommandBuilderJoinShellCmdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderJoinShellCmdCall) Return(arg0 CommandBuilder) *MockCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderJoinShellCmdCall) Do(f func(string) CommandBuilder) *MockCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderJoinShellCmdCall) DoAndReturn(f func(string) CommandBuilder) *MockCommandBuilderJoinShellCmdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinShellCmdWithContext mocks base method.
func (m *MockCommandBuilder) JoinShellCmdWithContext(ctx context.Context, command string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinShellCmdWithContext", ctx, command)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinShellCmdWithContext indicates an expected call of JoinShellCmdWithContext.
func (mr *MockCommandBuilderMockRecorder) JoinShellCmdWithContext(ctx, command any) *MockCommandBuilderJoinShellCmdWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinShellCmdWithContext", reflect.TypeOf((*MockCommandBuilder)(nil).JoinShellCmdWithContext), ctx, command)
	return &MockCommandBuilderJoinShellCmdWithContextCall{Call: call}
}

// MockCommandBuilderJoinShellCmdWithContextCall wrap *gomock.Call
type MockCommandBuilderJoinShellCmdWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderJoinShellCmdWithContextCall) Return(arg0 CommandBuilder) *MockCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderJoinShellCmdWithContextCall) Do(f func(context.Context, string) CommandBuilder) *MockCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderJoinShellCmdWithContextCall) DoAndReturn(f func(context.Context, string) CommandBuilder) *MockCommandBuilderJoinShellCmdWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JoinWithContext mocks base method.
func (m *MockCommandBuilder) JoinWithContext(ctx context.Context, name string, args ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinWithContext", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// JoinWithContext indicates an expected call of JoinWithContext.
func (mr *MockCommandBuilderMockRecorder) JoinWithContext(ctx, name any, args ...any) *MockCommandBuilderJoinWithContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinWithContext", reflect.TypeOf((*MockCommandBuilder)(nil).JoinWithContext), varargs...)
	return &MockCommandBuilderJoinWithContextCall{Call: call}
}

// MockCommandBuilderJoinWithContextCall wrap *gomock.Call
type MockCommandBuilderJoinWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderJoinWithContextCall) Return(arg0 CommandBuilder) *MockCommandBuilderJoinWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderJoinWithContextCall) Do(f func(context.Context, string, ...string) CommandBuilder) *MockCommandBuilderJoinWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderJoinWithContextCall) DoAndReturn(f func(context.Context, string, ...string) CommandBuilder) *MockCommandBuilderJoinWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalEnvironment mocks base method.
func (m *MockCommandBuilder) WithAdditionalEnvironment(envMap ...any) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range envMap {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalEnvironment", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithAdditionalEnvironment indicates an expected call of WithAdditionalEnvironment.
func (mr *MockCommandBuilderMockRecorder) WithAdditionalEnvironment(envMap ...any) *MockCommandBuilderWithAdditionalEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalEnvironment", reflect.TypeOf((*MockCommandBuilder)(nil).WithAdditionalEnvironment), envMap...)
	return &MockCommandBuilderWithAdditionalEnvironmentCall{Call: call}
}

// MockCommandBuilderWithAdditionalEnvironmentCall wrap *gomock.Call
type MockCommandBuilderWithAdditionalEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithAdditionalEnvironmentCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithAdditionalEnvironmentCall) Do(f func(...any) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithAdditionalEnvironmentCall) DoAndReturn(f func(...any) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalEnvironmentMap mocks base method.
func (m *MockCommandBuilder) WithAdditionalEnvironmentMap(envMap map[any]any) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAdditionalEnvironmentMap", envMap)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithAdditionalEnvironmentMap indicates an expected call of WithAdditionalEnvironmentMap.
func (mr *MockCommandBuilderMockRecorder) WithAdditionalEnvironmentMap(envMap any) *MockCommandBuilderWithAdditionalEnvironmentMapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalEnvironmentMap", reflect.TypeOf((*MockCommandBuilder)(nil).WithAdditionalEnvironmentMap), envMap)
	return &MockCommandBuilderWithAdditionalEnvironmentMapCall{Call: call}
}

// MockCommandBuilderWithAdditionalEnvironmentMapCall wrap *gomock.Call
type MockCommandBuilderWithAdditionalEnvironmentMapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithAdditionalEnvironmentMapCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentMapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithAdditionalEnvironmentMapCall) Do(f func(map[any]any) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentMapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithAdditionalEnvironmentMapCall) DoAndReturn(f func(map[any]any) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentMapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalEnvironmentPairs mocks base method.
func (m *MockCommandBuilder) WithAdditionalEnvironmentPairs(envMap ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range envMap {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalEnvironmentPairs", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithAdditionalEnvironmentPairs indicates an expected call of WithAdditionalEnvironmentPairs.
func (mr *MockCommandBuilderMockRecorder) WithAdditionalEnvironmentPairs(envMap ...any) *MockCommandBuilderWithAdditionalEnvironmentPairsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalEnvironmentPairs", reflect.TypeOf((*MockCommandBuilder)(nil).WithAdditionalEnvironmentPairs), envMap...)
	return &MockCommandBuilderWithAdditionalEnvironmentPairsCall{Call: call}
}

// MockCommandBuilderWithAdditionalEnvironmentPairsCall wrap *gomock.Call
type MockCommandBuilderWithAdditionalEnvironmentPairsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithAdditionalEnvironmentPairsCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentPairsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithAdditionalEnvironmentPairsCall) Do(f func(...string) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentPairsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithAdditionalEnvironmentPairsCall) DoAndReturn(f func(...string) CommandBuilder) *MockCommandBuilderWithAdditionalEnvironmentPairsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalErrorForks mocks base method.
func (m *MockCommandBuilder) WithAdditionalErrorForks(targets ...io.Writer) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalErrorForks", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithAdditionalErrorForks indicates an expected call of WithAdditionalErrorForks.
func (mr *MockCommandBuilderMockRecorder) WithAdditionalErrorForks(targets ...any) *MockCommandBuilderWithAdditionalErrorForksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalErrorForks", reflect.TypeOf((*MockCommandBuilder)(nil).WithAdditionalErrorForks), targets...)
	return &MockCommandBuilderWithAdditionalErrorForksCall{Call: call}
}

// MockCommandBuilderWithAdditionalErrorForksCall wrap *gomock.Call
type MockCommandBuilderWithAdditionalErrorForksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithAdditionalErrorForksCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithAdditionalErrorForksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithAdditionalErrorForksCall) Do(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithAdditionalErrorForksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithAdditionalErrorForksCall) DoAndReturn(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithAdditionalErrorForksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalOutputForks mocks base method.
func (m *MockCommandBuilder) WithAdditionalOutputForks(targets ...io.Writer) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalOutputForks", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithAdditionalOutputForks indicates an expected call of WithAdditionalOutputForks.
func (mr *MockCommandBuilderMockRecorder) WithAdditionalOutputForks(targets ...any) *MockCommandBuilderWithAdditionalOutputForksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalOutputForks", reflect.TypeOf((*MockCommandBuilder)(nil).WithAdditionalOutputForks), targets...)
	return &MockCommandBuilderWithAdditionalOutputForksCall{Call: call}
}

// MockCommandBuilderWithAdditionalOutputForksCall wrap *gomock.Call
type MockCommandBuilderWithAdditionalOutputForksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithAdditionalOutputForksCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithAdditionalOutputForksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithAdditionalOutputForksCall) Do(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithAdditionalOutputForksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithAdditionalOutputForksCall) DoAndReturn(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithAdditionalOutputForksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithEmptyEnvironment mocks base method.
func (m *MockCommandBuilder) WithEmptyEnvironment() CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEmptyEnvironment")
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithEmptyEnvironment indicates an expected call of WithEmptyEnvironment.
func (mr *MockCommandBuilderMockRecorder) WithEmptyEnvironment() *MockCommandBuilderWithEmptyEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEmptyEnvironment", reflect.TypeOf((*MockCommandBuilder)(nil).WithEmptyEnvironment))
	return &MockCommandBuilderWithEmptyEnvironmentCall{Call: call}
}

// MockCommandBuilderWithEmptyEnvironmentCall wrap *gomock.Call
type MockCommandBuilderWithEmptyEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithEmptyEnvironmentCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithEmptyEnvironmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithEmptyEnvironmentCall) Do(f func() CommandBuilder) *MockCommandBuilderWithEmptyEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithEmptyEnvironmentCall) DoAndReturn(f func() CommandBuilder) *MockCommandBuilderWithEmptyEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithEnvironment mocks base method.
func (m *MockCommandBuilder) WithEnvironment(envMap ...any) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range envMap {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithEnvironment", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithEnvironment indicates an expected call of WithEnvironment.
func (mr *MockCommandBuilderMockRecorder) WithEnvironment(envMap ...any) *MockCommandBuilderWithEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEnvironment", reflect.TypeOf((*MockCommandBuilder)(nil).WithEnvironment), envMap...)
	return &MockCommandBuilderWithEnvironmentCall{Call: call}
}

// MockCommandBuilderWithEnvironmentCall wrap *gomock.Call
type MockCommandBuilderWithEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithEnvironmentCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithEnvironmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithEnvironmentCall) Do(f func(...any) CommandBuilder) *MockCommandBuilderWithEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithEnvironmentCall) DoAndReturn(f func(...any) CommandBuilder) *MockCommandBuilderWithEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithEnvironmentMap mocks base method.
func (m *MockCommandBuilder) WithEnvironmentMap(envMap map[any]any) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEnvironmentMap", envMap)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithEnvironmentMap indicates an expected call of WithEnvironmentMap.
func (mr *MockCommandBuilderMockRecorder) WithEnvironmentMap(envMap any) *MockCommandBuilderWithEnvironmentMapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEnvironmentMap", reflect.TypeOf((*MockCommandBuilder)(nil).WithEnvironmentMap), envMap)
	return &MockCommandBuilderWithEnvironmentMapCall{Call: call}
}

// MockCommandBuilderWithEnvironmentMapCall wrap *gomock.Call
type MockCommandBuilderWithEnvironmentMapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithEnvironmentMapCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithEnvironmentMapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithEnvironmentMapCall) Do(f func(map[any]any) CommandBuilder) *MockCommandBuilderWithEnvironmentMapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithEnvironmentMapCall) DoAndReturn(f func(map[any]any) CommandBuilder) *MockCommandBuilderWithEnvironmentMapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithEnvironmentPairs mocks base method.
func (m *MockCommandBuilder) WithEnvironmentPairs(envMap ...string) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range envMap {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithEnvironmentPairs", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithEnvironmentPairs indicates an expected call of WithEnvironmentPairs.
func (mr *MockCommandBuilderMockRecorder) WithEnvironmentPairs(envMap ...any) *MockCommandBuilderWithEnvironmentPairsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEnvironmentPairs", reflect.TypeOf((*MockCommandBuilder)(nil).WithEnvironmentPairs), envMap...)
	return &MockCommandBuilderWithEnvironmentPairsCall{Call: call}
}

// MockCommandBuilderWithEnvironmentPairsCall wrap *gomock.Call
type MockCommandBuilderWithEnvironmentPairsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithEnvironmentPairsCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithEnvironmentPairsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithEnvironmentPairsCall) Do(f func(...string) CommandBuilder) *MockCommandBuilderWithEnvironmentPairsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithEnvironmentPairsCall) DoAndReturn(f func(...string) CommandBuilder) *MockCommandBuilderWithEnvironmentPairsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithErrorChecker mocks base method.
func (m *MockCommandBuilder) WithErrorChecker(arg0 ErrorChecker) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithErrorChecker", arg0)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithErrorChecker indicates an expected call of WithErrorChecker.
func (mr *MockCommandBuilderMockRecorder) WithErrorChecker(arg0 any) *MockCommandBuilderWithErrorCheckerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithErrorChecker", reflect.TypeOf((*MockCommandBuilder)(nil).WithErrorChecker), arg0)
	return &MockCommandBuilderWithErrorCheckerCall{Call: call}
}

// MockCommandBuilderWithErrorCheckerCall wrap *gomock.Call
type MockCommandBuilderWithErrorCheckerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithErrorCheckerCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithErrorCheckerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithErrorCheckerCall) Do(f func(ErrorChecker) CommandBuilder) *MockCommandBuilderWithErrorCheckerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithErrorCheckerCall) DoAndReturn(f func(ErrorChecker) CommandBuilder) *MockCommandBuilderWithErrorCheckerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithErrorForks mocks base method.
func (m *MockCommandBuilder) WithErrorForks(targets ...io.Writer) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithErrorForks", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithErrorForks indicates an expected call of WithErrorForks.
func (mr *MockCommandBuilderMockRecorder) WithErrorForks(targets ...any) *MockCommandBuilderWithErrorForksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithErrorForks", reflect.TypeOf((*MockCommandBuilder)(nil).WithErrorForks), targets...)
	return &MockCommandBuilderWithErrorForksCall{Call: call}
}

// MockCommandBuilderWithErrorForksCall wrap *gomock.Call
type MockCommandBuilderWithErrorForksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithErrorForksCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithErrorForksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithErrorForksCall) Do(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithErrorForksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithErrorForksCall) DoAndReturn(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithErrorForksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithInjections mocks base method.
func (m *MockCommandBuilder) WithInjections(sources ...io.Reader) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithInjections", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithInjections indicates an expected call of WithInjections.
func (mr *MockCommandBuilderMockRecorder) WithInjections(sources ...any) *MockCommandBuilderWithInjectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInjections", reflect.TypeOf((*MockCommandBuilder)(nil).WithInjections), sources...)
	return &MockCommandBuilderWithInjectionsCall{Call: call}
}

// MockCommandBuilderWithInjectionsCall wrap *gomock.Call
type MockCommandBuilderWithInjectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithInjectionsCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithInjectionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithInjectionsCall) Do(f func(...io.Reader) CommandBuilder) *MockCommandBuilderWithInjectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithInjectionsCall) DoAndReturn(f func(...io.Reader) CommandBuilder) *MockCommandBuilderWithInjectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithOutputForks mocks base method.
func (m *MockCommandBuilder) WithOutputForks(targets ...io.Writer) CommandBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOutputForks", varargs...)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithOutputForks indicates an expected call of WithOutputForks.
func (mr *MockCommandBuilderMockRecorder) WithOutputForks(targets ...any) *MockCommandBuilderWithOutputForksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOutputForks", reflect.TypeOf((*MockCommandBuilder)(nil).WithOutputForks), targets...)
	return &MockCommandBuilderWithOutputForksCall{Call: call}
}

// MockCommandBuilderWithOutputForksCall wrap *gomock.Call
type MockCommandBuilderWithOutputForksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithOutputForksCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithOutputForksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithOutputForksCall) Do(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithOutputForksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithOutputForksCall) DoAndReturn(f func(...io.Writer) CommandBuilder) *MockCommandBuilderWithOutputForksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithWorkingDirectory mocks base method.
func (m *MockCommandBuilder) WithWorkingDirectory(workingDir string) CommandBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWorkingDirectory", workingDir)
	ret0, _ := ret[0].(CommandBuilder)
	return ret0
}

// WithWorkingDirectory indicates an expected call of WithWorkingDirectory.
func (mr *MockCommandBuilderMockRecorder) WithWorkingDirectory(workingDir any) *MockCommandBuilderWithWorkingDirectoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWorkingDirectory", reflect.TypeOf((*MockCommandBuilder)(nil).WithWorkingDirectory), workingDir)
	return &MockCommandBuilderWithWorkingDirectoryCall{Call: call}
}

// MockCommandBuilderWithWorkingDirectoryCall wrap *gomock.Call
type MockCommandBuilderWithWorkingDirectoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandBuilderWithWorkingDirectoryCall) Return(arg0 CommandBuilder) *MockCommandBuilderWithWorkingDirectoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandBuilderWithWorkingDirectoryCall) Do(f func(string) CommandBuilder) *MockCommandBuilderWithWorkingDirectoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandBuilderWithWorkingDirectoryCall) DoAndReturn(f func(string) CommandBuilder) *MockCommandBuilderWithWorkingDirectoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFinalizedBuilder is a mock of FinalizedBuilder interface.
type MockFinalizedBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizedBuilderMockRecorder
	isgomock struct{}
}

// MockFinalizedBuilderMockRecorder is the mock recorder for MockFinalizedBuilder.
type MockFinalizedBuilderMockRecorder struct {
	mock *MockFinalizedBuilder
}

// NewMockFinalizedBuilder creates a new mock instance.
func NewMockFinalizedBuilder(ctrl *gomock.Controller) *MockFinalizedBuilder {
	mock := &MockFinalizedBuilder{ctrl: ctrl}
	mock.recorder = &MockFinalizedBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizedBuilder) EXPECT() *MockFinalizedBuilderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFinalizedBuilder) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockFinalizedBuilderMockRecorder) Run() *MockFinalizedBuilderRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFinalizedBuilder)(nil).Run))
	return &MockFinalizedBuilderRunCall{Call: call}
}

// MockFinalizedBuilderRunCall wrap *gomock.Call
type MockFinalizedBuilderRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderRunCall) Return(arg0 error) *MockFinalizedBuilderRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderRunCall) Do(f func() error) *MockFinalizedBuilderRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderRunCall) DoAndReturn(f func() error) *MockFinalizedBuilderRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunAndGet mocks base method.
func (m *MockFinalizedBuilder) RunAndGet() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAndGet")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunAndGet indicates an expected call of RunAndGet.
func (mr *MockFinalizedBuilderMockRecorder) RunAndGet() *MockFinalizedBuilderRunAndGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAndGet", reflect.TypeOf((*MockFinalizedBuilder)(nil).RunAndGet))
	return &MockFinalizedBuilderRunAndGetCall{Call: call}
}

// MockFinalizedBuilderRunAndGetCall wrap *gomock.Call
type MockFinalizedBuilderRunAndGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderRunAndGetCall) Return(arg0, arg1 string, arg2 error) *MockFinalizedBuilderRunAndGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderRunAndGetCall) Do(f func() (string, string, error)) *MockFinalizedBuilderRunAndGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderRunAndGetCall) DoAndReturn(f func() (string, string, error)) *MockFinalizedBuilderRunAndGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockFinalizedBuilder) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFinalizedBuilderMockRecorder) String() *MockFinalizedBuilderStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFinalizedBuilder)(nil).String))
	return &MockFinalizedBuilderStringCall{Call: call}
}

// MockFinalizedBuilderStringCall wrap *gomock.Call
type MockFinalizedBuilderStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderStringCall) Return(arg0 string) *MockFinalizedBuilderStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderStringCall) Do(f func() string) *MockFinalizedBuilderStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderStringCall) DoAndReturn(f func() string) *MockFinalizedBuilderStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalError mocks base method.
func (m *MockFinalizedBuilder) WithAdditionalError(targets ...io.Writer) FinalizedBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalError", varargs...)
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// WithAdditionalError indicates an expected call of WithAdditionalError.
func (mr *MockFinalizedBuilderMockRecorder) WithAdditionalError(targets ...any) *MockFinalizedBuilderWithAdditionalErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalError", reflect.TypeOf((*MockFinalizedBuilder)(nil).WithAdditionalError), targets...)
	return &MockFinalizedBuilderWithAdditionalErrorCall{Call: call}
}

// MockFinalizedBuilderWithAdditionalErrorCall wrap *gomock.Call
type MockFinalizedBuilderWithAdditionalErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderWithAdditionalErrorCall) Return(arg0 FinalizedBuilder) *MockFinalizedBuilderWithAdditionalErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderWithAdditionalErrorCall) Do(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithAdditionalErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderWithAdditionalErrorCall) DoAndReturn(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithAdditionalErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAdditionalOutput mocks base method.
func (m *MockFinalizedBuilder) WithAdditionalOutput(targets ...io.Writer) FinalizedBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAdditionalOutput", varargs...)
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// WithAdditionalOutput indicates an expected call of WithAdditionalOutput.
func (mr *MockFinalizedBuilderMockRecorder) WithAdditionalOutput(targets ...any) *MockFinalizedBuilderWithAdditionalOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAdditionalOutput", reflect.TypeOf((*MockFinalizedBuilder)(nil).WithAdditionalOutput), targets...)
	return &MockFinalizedBuilderWithAdditionalOutputCall{Call: call}
}

// MockFinalizedBuilderWithAdditionalOutputCall wrap *gomock.Call
type MockFinalizedBuilderWithAdditionalOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderWithAdditionalOutputCall) Return(arg0 FinalizedBuilder) *MockFinalizedBuilderWithAdditionalOutputCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderWithAdditionalOutputCall) Do(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithAdditionalOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderWithAdditionalOutputCall) DoAndReturn(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithAdditionalOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithError mocks base method.
func (m *MockFinalizedBuilder) WithError(targets ...io.Writer) FinalizedBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithError", varargs...)
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockFinalizedBuilderMockRecorder) WithError(targets ...any) *MockFinalizedBuilderWithErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockFinalizedBuilder)(nil).WithError), targets...)
	return &MockFinalizedBuilderWithErrorCall{Call: call}
}

// MockFinalizedBuilderWithErrorCall wrap *gomock.Call
type MockFinalizedBuilderWithErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderWithErrorCall) Return(arg0 FinalizedBuilder) *MockFinalizedBuilderWithErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderWithErrorCall) Do(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderWithErrorCall) DoAndReturn(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithGlobalErrorChecker mocks base method.
func (m *MockFinalizedBuilder) WithGlobalErrorChecker(arg0 ErrorChecker) FinalizedBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGlobalErrorChecker", arg0)
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// WithGlobalErrorChecker indicates an expected call of WithGlobalErrorChecker.
func (mr *MockFinalizedBuilderMockRecorder) WithGlobalErrorChecker(arg0 any) *MockFinalizedBuilderWithGlobalErrorCheckerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGlobalErrorChecker", reflect.TypeOf((*MockFinalizedBuilder)(nil).WithGlobalErrorChecker), arg0)
	return &MockFinalizedBuilderWithGlobalErrorCheckerCall{Call: call}
}

// MockFinalizedBuilderWithGlobalErrorCheckerCall wrap *gomock.Call
type MockFinalizedBuilderWithGlobalErrorCheckerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderWithGlobalErrorCheckerCall) Return(arg0 FinalizedBuilder) *MockFinalizedBuilderWithGlobalErrorCheckerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderWithGlobalErrorCheckerCall) Do(f func(ErrorChecker) FinalizedBuilder) *MockFinalizedBuilderWithGlobalErrorCheckerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderWithGlobalErrorCheckerCall) DoAndReturn(f func(ErrorChecker) FinalizedBuilder) *MockFinalizedBuilderWithGlobalErrorCheckerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithOutput mocks base method.
func (m *MockFinalizedBuilder) WithOutput(targets ...io.Writer) FinalizedBuilder {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOutput", varargs...)
	ret0, _ := ret[0].(FinalizedBuilder)
	return ret0
}

// WithOutput indicates an expected call of WithOutput.
func (mr *MockFinalizedBuilderMockRecorder) WithOutput(targets ...any) *MockFinalizedBuilderWithOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOutput", reflect.TypeOf((*MockFinalizedBuilder)(nil).WithOutput), targets...)
	return &MockFinalizedBuilderWithOutputCall{Call: call}
}

// MockFinalizedBuilderWithOutputCall wrap *gomock.Call
type MockFinalizedBuilderWithOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizedBuilderWithOutputCall) Return(arg0 FinalizedBuilder) *MockFinalizedBuilderWithOutputCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizedBuilderWithOutputCall) Do(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizedBuilderWithOutputCall) DoAndReturn(f func(...io.Writer) FinalizedBuilder) *MockFinalizedBuilderWithOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
